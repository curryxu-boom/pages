(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{1398:function(s,e,t){"use strict";t.r(e);var i=t(1),a=Object(i.a)({},(function(){var s=this,e=s.$createElement,i=s._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[i("h2",{attrs:{id:"_1、缓存预热"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1、缓存预热"}},[s._v("#")]),s._v(" 1、缓存预热")]),s._v(" "),i("img",{attrs:{src:t(762)}}),s._v(" "),i("h2",{attrs:{id:"_2、缓存穿透"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2、缓存穿透"}},[s._v("#")]),s._v(" 2、缓存穿透")]),s._v(" "),i("img",{attrs:{src:t(763)}}),s._v(" "),i("h2",{attrs:{id:"_3、雪崩效应"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3、雪崩效应"}},[s._v("#")]),s._v(" 3、雪崩效应")]),s._v(" "),i("img",{attrs:{src:t(764)}}),s._v(" "),i("p",[s._v("雪崩效应：")]),s._v(" "),i("p",[s._v("Redis服务器死了 所有的请求都请求到 MySQL上、所以这个时候 MySQL还是要死  这种情况就称为 雪崩效应")]),s._v(" "),i("p",[s._v("优化方法：")]),s._v(" "),i("p",[s._v("1、保持缓存层服务器的高可用。")]),s._v(" "),i("p",[s._v("–监控、集群、哨兵。当一个集群里面有一台服务器有问题，让哨兵踢出去。")]),s._v(" "),i("p",[s._v("2、依赖隔离组件为后端限流并降级。")]),s._v(" "),i("p",[s._v("比如推荐服务中，如果个性化推荐服务不可用，可以降级为热点数据。")]),s._v(" "),i("p",[s._v("3、提前演练")]),s._v(" "),i("p",[s._v("演练 缓存层crash后，应用以及后端的负载情况以及可能出现的问题。对此做一些预案设定")]),s._v(" "),i("h2",{attrs:{id:"_4、脑裂效应"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_4、脑裂效应"}},[s._v("#")]),s._v(" 4、脑裂效应")]),s._v(" "),i("img",{attrs:{src:t(765)}}),s._v(" "),i("p",[i("strong",[s._v("redis异步主从数据复制和集群脑裂解决方案")])]),s._v(" "),i("p",[s._v("对于redis主从架构，master接受到请求之后执行完会立刻返回给client，然后会异步复制给其他master，此时会出现两种问题：")]),s._v(" "),i("ol",[i("li",[s._v("当集群节点间网络或其他问题导致异步复制延时很高，如果此时master宕机了，毫无疑问会丢失延时的这段时间的数据")]),s._v(" "),i("li",[s._v("当网络分区变化导致master和slave节点之间无法正常通信时，sentinel哨兵集群会选举slave为master，此时与之前master连接的client一直发送数据，当master的slave节点的时我们进行恢复将原master当做新候，那么后来一直发送到原master内存的数据会丢失")])]),s._v(" "),i("div",{staticClass:"language-sh line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-sh"}},[i("code",[s._v("min-slaves-to-write "),i("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nmin-slaves-max-lag "),i("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n第一个参数表示连接到master的最少slave数量\n第二个参数表示slave连接到master的最大延迟时间\n")])]),s._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[s._v("1")]),i("br"),i("span",{staticClass:"line-number"},[s._v("2")]),i("br"),i("span",{staticClass:"line-number"},[s._v("3")]),i("br"),i("span",{staticClass:"line-number"},[s._v("4")]),i("br")])]),i("h2",{attrs:{id:"问题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[s._v("#")]),s._v(" 问题")]),s._v(" "),i("div",{staticClass:"language-txt line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-txt"}},[i("code",[s._v("maxActive：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态就成exhausted了，在JedisPoolConfig\nmaxIdle：控制一个pool最多有多少个状态为idle的jedis实例；\nwhenExhaustedAction：表示当pool中的jedis实例都被allocated完时，pool要采取的操作；默认有三种WHEN_EXHAUSTED_FAIL（表示无jedis实例时，直接抛出NoSuchElementException）、WHEN_EXHAUSTED_BLOCK（则表示阻塞住，或者达到maxWait时抛出JedisConnectionException）、WHEN_EXHAUSTED_GROW（则表示新建一个jedis实例，也就说设置的maxActive无用）；\nmaxWait：表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；\ntestOnBorrow：在borrow一个jedis实例时，是否提前进行alidate操作；如果为true，则得到的jedis实例均是可用的；\ntestOnReturn：在return给pool时，是否提前进行validate操作；\ntestWhileIdle：如果为true，表示有一个idle object evitor线程对idle object进行扫描，如果validate失败，此object会被从pool中drop掉；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；\ntimeBetweenEvictionRunsMillis：表示idle object evitor两次扫描之间要sleep的毫秒数；\nnumTestsPerEvictionRun：表示idle object evitor每次扫描的最多的对象数；\nminEvictableIdleTimeMillis：表示一个对象至少停留在idle状态的最短时间，然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；\nsoftMinEvictableIdleTimeMillis：在minEvictableIdleTimeMillis基础上，加入了至少minIdle个对象已经在pool里面了。如果为-1，evicted不会根据idle time驱逐任何对象。如果minEvictableIdleTimeMillis>0，则此项设置无意义，且只有在timeBetweenEvictionRunsMillis大于0时才有意义；\nlifo：borrowObject返回对象时，是采用DEFAULT_LIFO（last in first out，即类似cache的最频繁使用队列），如果为False，则表示FIFO队列；\n\n其中JedisPoolConfig对一些参数的默认设置如下：\ntestWhileIdle=true\nminEvictableIdleTimeMills=60000\ntimeBetweenEvictionRunsMillis=30000\nnumTestsPerEvictionRun=-1\n\n")])]),s._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[s._v("1")]),i("br"),i("span",{staticClass:"line-number"},[s._v("2")]),i("br"),i("span",{staticClass:"line-number"},[s._v("3")]),i("br"),i("span",{staticClass:"line-number"},[s._v("4")]),i("br"),i("span",{staticClass:"line-number"},[s._v("5")]),i("br"),i("span",{staticClass:"line-number"},[s._v("6")]),i("br"),i("span",{staticClass:"line-number"},[s._v("7")]),i("br"),i("span",{staticClass:"line-number"},[s._v("8")]),i("br"),i("span",{staticClass:"line-number"},[s._v("9")]),i("br"),i("span",{staticClass:"line-number"},[s._v("10")]),i("br"),i("span",{staticClass:"line-number"},[s._v("11")]),i("br"),i("span",{staticClass:"line-number"},[s._v("12")]),i("br"),i("span",{staticClass:"line-number"},[s._v("13")]),i("br"),i("span",{staticClass:"line-number"},[s._v("14")]),i("br"),i("span",{staticClass:"line-number"},[s._v("15")]),i("br"),i("span",{staticClass:"line-number"},[s._v("16")]),i("br"),i("span",{staticClass:"line-number"},[s._v("17")]),i("br"),i("span",{staticClass:"line-number"},[s._v("18")]),i("br"),i("span",{staticClass:"line-number"},[s._v("19")]),i("br")])])])}),[],!1,null,null,null);e.default=a.exports},762:function(s,e,t){s.exports=t.p+"assets/img/1594711985541.cc93e259.png"},763:function(s,e,t){s.exports=t.p+"assets/img/img.b35f01d2.png"},764:function(s,e,t){s.exports=t.p+"assets/img/img_1.42c2d602.png"},765:function(s,e,t){s.exports=t.p+"assets/img/img_2.394a283d.png"}}]);