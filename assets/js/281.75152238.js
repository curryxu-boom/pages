(window.webpackJsonp=window.webpackJsonp||[]).push([[281],{1045:function(t,v,_){"use strict";_.r(v);var e=_(1),d=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("table",[_("thead",[_("tr",[_("th",[t._v("方法名")]),t._v(" "),_("th",[t._v("static")]),t._v(" "),_("th",{staticStyle:{"text-align":"left"}},[t._v("功能说明")]),t._v(" "),_("th",[t._v("注意")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("start()")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("启动一个新线 程，在新的线程 运行 run 方法 中的代码")]),t._v(" "),_("td",[t._v("start 方法只是让线程进入就绪，里面代码不一定立刻 运行（CPU 的时间片还没分给它）。                                                                   每个线程对象的 start方法只能调用一次，如果调用了多次会出现 IllegalThreadStateException")])]),t._v(" "),_("tr",[_("td",[t._v("run()")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("新线程启动后会调用的方法")]),t._v(" "),_("td",[t._v("如果在构造 Thread 对象时传递了 Runnable 参数，则 线程启动后会调用 Runnable 中的 run 方法，否则默 认不执行任何操作。但可以创建 Thread 的子类对象， 来覆盖默认行为")])]),t._v(" "),_("tr",[_("td",[t._v("join()")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("等待线程运行结束")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("join(long n)")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("等待线程运行结 束,最多等待 n  毫秒")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("getId()")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("获取线程长整型的 id")]),t._v(" "),_("td",[t._v("id 唯一")])]),t._v(" "),_("tr",[_("td",[t._v("getName()")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("获取线程名")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("setName(String )")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("修改线程名")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("getPriority()")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("获取线程优先级")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("setPriority(int)")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("修改线程优先级")]),t._v(" "),_("td",[t._v("java中规定线程优先级是1~10 的整数，较大的优先级 能提高该线程被 CPU 调度的机率")])]),t._v(" "),_("tr",[_("td",[t._v("getState()")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("获取线程状态")]),t._v(" "),_("td",[t._v("Java 中线程状态是用 6 个 enum 表示，分别为： NEW, RUNNABLE, BLOCKED, WAITING,  TIMED_WAITING, TERMINATED")])]),t._v(" "),_("tr",[_("td",[t._v("isInterrupted()")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("判断是否被打断")]),t._v(" "),_("td",[t._v("不会清除 打断标记")])]),t._v(" "),_("tr",[_("td",[t._v("isAlive()")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("线程是否存活 （还没有运行完 毕）")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("interrupt()")]),t._v(" "),_("td"),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("打断线程")]),t._v(" "),_("td",[t._v("如果被打断线程正在 sleep，wait，join 会导致被打断 的线程抛出 InterruptedException，并清除 打断标 记 ；如果打断的正在运行的线程，则会设置 打断标 记 ；park 的线程被打断，也会设置 打断标记")])]),t._v(" "),_("tr",[_("td",[t._v("interrupted()")]),t._v(" "),_("td",[t._v("static")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("判断当前线程是否被打断")]),t._v(" "),_("td",[t._v("会清除打断标记")])]),t._v(" "),_("tr",[_("td",[t._v("currentThread()")]),t._v(" "),_("td",[t._v("static")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("获取当前正在执")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("sleep(long n)")]),t._v(" "),_("td",[t._v("static")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("让当前执行的线 程休眠n毫秒， 休眠时让出 cpu  的时间片给其它 线程")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("yield()")]),t._v(" "),_("td",[t._v("static")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("提示线程调度器 让出当前线程对 CPU的使用 主要是为了测试和调试")]),t._v(" "),_("td")])])])])}),[],!1,null,null,null);v.default=d.exports}}]);