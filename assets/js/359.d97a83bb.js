(window.webpackJsonp=window.webpackJsonp||[]).push([[359],{1159:function(t,a,s){"use strict";s.r(a);var e=s(1),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"cardListContainer"},[s("div",{staticClass:"card-list"},[s("a",{staticClass:"card-item row-3",staticStyle:{"background-color":"#718971","--randomColor":"#718971",color:"#fff"},attrs:{href:"/pages/img/java/designPatterns/designPatterns.pdf",target:"_blank"}},[s("img",{staticClass:"no-zoom",attrs:{src:"/pages/img/java/designPatterns/logo.png"}}),t._v(" "),s("div",[s("p",{staticClass:"name"},[t._v("设计模式")]),t._v(" "),s("p",{staticClass:"desc"},[t._v("设计模式 的 pdf 传送门")])])])]),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 设计模式\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("desc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'设计模式 的 pdf 传送门'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("avatar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /img/java/designPatterns/logo.png\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("link")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /img/java/designPatterns/designPatterns.pdf\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("bgColor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#718971'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("textColor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#fff'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])])]),s("h2",{attrs:{id:"设计模式的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的优点"}},[t._v("#")]),t._v(" 设计模式的优点")]),t._v(" "),s("ul",[s("li",[t._v("提供了一种共享的设计词汇和概念，使开发人员能够更好地沟通和理解彼此的设计意图。")]),t._v(" "),s("li",[t._v("提供了经过验证的解决方案，可以提高软件的可维护性、可复用性和灵活性。")]),t._v(" "),s("li",[t._v("促进了代码的重用，避免了重复的设计和实现。")]),t._v(" "),s("li",[t._v("通过遵循设计模式，可以减少系统中的错误和问题，提高代码质量。")])]),t._v(" "),s("h2",{attrs:{id:"设计模式的六大原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的六大原则"}},[t._v("#")]),t._v(" 设计模式的六大原则")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("1、开闭原则（Open Close Principle）")])]),t._v(" "),s("ul",[s("li",[t._v("开闭原则的意思是："),s("strong",[t._v("对扩展开放，对修改关闭")]),t._v("。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。")])]),t._v(" "),s("p",[s("strong",[t._v("2、里氏代换原则（Liskov Substitution Principle）")])]),t._v(" "),s("ul",[s("li",[t._v("里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。")])]),t._v(" "),s("p",[s("strong",[t._v("3、依赖倒转原则（Dependence Inversion Principle）")])]),t._v(" "),s("ul",[s("li",[t._v("这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。")])]),t._v(" "),s("p",[s("strong",[t._v("4、接口隔离原则（Interface Segregation Principle）")])]),t._v(" "),s("ul",[s("li",[t._v("这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。")])]),t._v(" "),s("p",[s("strong",[t._v("5、迪米特法则，又称最少知道原则（Demeter Principle）")])]),t._v(" "),s("ul",[s("li",[t._v("最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。")])]),t._v(" "),s("p",[s("strong",[t._v("6、合成复用原则（Composite Reuse Principle）")])]),t._v(" "),s("ul",[s("li",[t._v("合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。")])])]),t._v(" "),s("h2",{attrs:{id:"设计模式的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的类型"}},[t._v("#")]),t._v(" 设计模式的类型")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("根据设计模式的参考书")]),t._v(" "),s("strong",[t._v("Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）")]),t._v(" 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）")])]),t._v(" "),s("h3",{attrs:{id:"创建型模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" "),s("strong",[t._v("创建型模式")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("这类模式提供创建对象的机制， 能够提升已有代码的灵活性和可复⽤性")])])]),t._v(" "),s("ul",[s("li",[t._v("工厂模式（Factory Pattern）")]),t._v(" "),s("li",[t._v("抽象工厂模式（Abstract Factory Pattern）")]),t._v(" "),s("li",[t._v("单例模式（Singleton Pattern）")]),t._v(" "),s("li",[t._v("建造者模式（Builder Pattern）")]),t._v(" "),s("li",[t._v("原型模式（Prototype Pattern）")])]),t._v(" "),s("h3",{attrs:{id:"结构型模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" "),s("strong",[t._v("结构型模式")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("这类模式介绍如何将对象和类组装成较⼤的结构， 并同时保持结构的灵活和⾼效")])])]),t._v(" "),s("ul",[s("li",[t._v("适配器模式（Adapter Pattern）")]),t._v(" "),s("li",[t._v("桥接模式（Bridge Pattern）")]),t._v(" "),s("li",[t._v("过滤器模式（Filter、Criteria Pattern）")]),t._v(" "),s("li",[t._v("组合模式（Composite Pattern）")]),t._v(" "),s("li",[t._v("装饰器模式（Decorator Pattern）")]),t._v(" "),s("li",[t._v("外观模式（Facade Pattern）")]),t._v(" "),s("li",[t._v("享元模式（Flyweight Pattern）")]),t._v(" "),s("li",[t._v("代理模式（Proxy Pattern）")])]),t._v(" "),s("h3",{attrs:{id:"行为型模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" "),s("strong",[t._v("行为型模式")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("这类模式负责对象间的⾼效沟通和职责委派")])])]),t._v(" "),s("ul",[s("li",[t._v("责任链模式（Chain of Responsibility Pattern）")]),t._v(" "),s("li",[t._v("命令模式（Command Pattern）")]),t._v(" "),s("li",[t._v("解释器模式（Interpreter Pattern）")]),t._v(" "),s("li",[t._v("迭代器模式（Iterator Pattern）")]),t._v(" "),s("li",[t._v("中介者模式（Mediator Pattern）")]),t._v(" "),s("li",[t._v("备忘录模式（Memento Pattern）")]),t._v(" "),s("li",[t._v("观察者模式（Observer Pattern）")]),t._v(" "),s("li",[t._v("状态模式（State Pattern）")]),t._v(" "),s("li",[t._v("空对象模式（Null Object Pattern）")]),t._v(" "),s("li",[t._v("策略模式（Strategy Pattern）")]),t._v(" "),s("li",[t._v("模板模式（Template Pattern）")]),t._v(" "),s("li",[t._v("访问者模式（Visitor Pattern）")])])])}),[],!1,null,null,null);a.default=r.exports}}]);